*******************************************SOLID principal********************************
S- Single-responsiblity Principle
O- Open-closed Principle
L- Liskov Substitution Principle
I- Interface Segregation Principle
D- Dependency Inversion Principle

Cohesion: refers to what the class (or module) can do. 
Low cohesion would mean that the class does a great variety of actions - it is broad, 
unfocused on what it should do. 
High cohesion means that the class is focused on what it should be doing.

coupling, it refers to how related or dependent two classes/modules are toward each other. 
For low coupled classes, changing something major in one class should not affect the other. 
High coupling would make it difficult to change and maintain your code.

Single responsibility principle: 
High cohesion: Responsibility over single purpose.
One class should take single responsibility. 

Advantages of SRP:
Maintainability
Testability
Loose coupling

//User's login and registration and log an error and send mail for successful login.
class processFile
{
public:
	void downloadFile(string location);
	void parseFile(File file);
	void persistData(Data data);
};


--------------------------------------------------------------------------------------------

Open/Closed principals: Open for extension but closed for modification.
Classes/functions must be opened for extension but closed for modification.
Abstract interfaces:
problematic code:
enum pizza 
{
   Dominos,
   Mozo              //If we add more vendors... will modify code getOrder
};

class Pizza 
{
public:
	getOrder(string pizza_type)
   {
       switch (pizza_type) 
	   {
           case Domino's :
               preparePizza();
           case Mozo :
               preparePizza();
       }
   }
};

solution:
class Pizza 
{
public:
	preparePizza() = 0;
};

class mozo: Pizza
{
public:
	preparePizza()
	{
	}
};

class mozo: Dominos
{
public:
	preparePizza()
	{
	}
};
---------------------------------------------------------------------------------------
Liskov substitution principal:
 A subclass should satisfy behavioral expectations of parent class.

-----------------------------------------------------------------------------------------------
Interface segregation:
No client should be forced to depend on methods it does not use. ISP splits interfaces that are very large into smaller and more specific ones so that clients will only have to know about the methods that are of interest to them.

problem:
class printer //Abstract class
{
	void print()=0;
	void scan() =0;
	void fax()=0;        //this is not usable for client myprinter
	
};

class myprinter: public printer
{
	
};

Solution:
We should have two abstract classes:
class printer //Abstract class
{
	void print()=0;
	void scan() =0;
	
};

class Fax //Abstract class
{
	void fax()=0;       
	
};
-----------------------------------------------------------------------------------------------
Dependency inversion principal:
low coupling. High level module should not depend on low level module. 
Both should depend on abstract interfaces/classes not on the concrete classes.

Problematic code:
class mycloud
{
public:
	void upload(string filepath);
};

class fileUploader
{
public:
		fileUploader(mycloud& mcl); //it depends on myCloud which is wrong...should depend on abstraction.
};

//Correction:
class cloud
{
public:
	void upload(string filepath)=0;
};

class mycloud:public cloud
{
public:
	void upload()
	{
		cout<<""<<endl;
	}
};
class fileUploader
{
public:
		fileUploader(cloud& cl); //it depends on myCloud which is wrong...should depend on abstraction.
};